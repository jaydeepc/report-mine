{"report": {"environment": {"Platform": "Linux-3.10.0-229.14.1.el7.x86_64-x86_64-with-centos-7.2.1511-Core", "Python": "3.5.1"}, "tests": [{"name": "tests/event_price_volume_tests/test_preseason_force_price_volume_api.py::PriceVolumeAPITests::test_user_can_retrieve_price_volume_details", "call": {"name": "call", "longrepr": "self = <test_preseason_force_price_volume_api.PriceVolumeAPITests testMethod=test_user_can_retrieve_price_volume_details>\n\n    @pytest.mark.price_volume_api\n    @pytest.mark.smoke\n    def test_user_can_retrieve_price_volume_details(self):\n        details = self.price_volume_client.get_price_volume_for_single_retail(self.planning_measure_id, self.event_end_day_key)\n        details_obj = details.object\n>       self.assertEquals(details.status_code, 200, msg=ExceptionMessageGenerator().status_code_exception(details, 200, details.status_code))\nE       AssertionError: 500 != 200 : \nE       Status codes do not match.\nE       Expected Status Code: 200\nE       Actual Status Code: 500\nE       *****************************\nE       Request Details: \nE       *****************************\nE       URL: https://dev.periscope.mckinsey-solutions.com/intapp2/price/price/api/in/singleretail/facts/93955/pricevolume?eventEndDayKey=1023\nE       Method: GET\nE       payload: None\nE       *****************************\nE       Response Details: \nE       *****************************\nE       Body: b'{\"success\":null,\"error\":\"failed to fetch user preferences\"}'\n\ntests/event_price_volume_tests/test_preseason_force_price_volume_api.py:25: AssertionError", "outcome": "failed", "duration": 0.03432273864746094}, "duration": 0.034928083419799805, "run_index": 1, "teardown": {"name": "teardown", "outcome": "passed", "duration": 7.557868957519531e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.00026488304138183594}, "outcome": "failed"}, {"name": "tests/price_group_info_tests/test_price_group_info_api.py::PriceGroupInfoAPITests::test_user_can_retrieve_price_group_info", "call": {"name": "call", "longrepr": "self = <api.tests.price_group_info_tests.test_price_group_info_api.PriceGroupInfoAPITests testMethod=test_user_can_retrieve_price_group_info>\n\n    @pytest.mark.price_group_info\n    @pytest.mark.smoke\n    def test_user_can_retrieve_price_group_info(self):\n        details = self.price_group_info_api_client.get_price_group_info(self.planning_measure_id)\n>       self.assertEquals(details.status_code, 200, msg=ExceptionMessageGenerator().status_code_exception(details, 200, details.status_code))\nE       AssertionError: 500 != 200 : \nE       Status codes do not match.\nE       Expected Status Code: 200\nE       Actual Status Code: 500\nE       *****************************\nE       Request Details: \nE       *****************************\nE       URL: https://dev.periscope.mckinsey-solutions.com/intapp2/price/price/api/in/pricinggroupinfo\nE       Method: POST\nE       payload: {\"filters\": {\"factIdentifiers\": [{\"key\": 93955}]}}\nE       *****************************\nE       Response Details: \nE       *****************************\nE       Body: b'{\"success\":null,\"error\":\"failed to get user preferences\"}'\n\ntests/price_group_info_tests/test_price_group_info_api.py:20: AssertionError", "outcome": "failed", "duration": 0.03583502769470215}, "duration": 0.036492109298706055, "run_index": 7, "teardown": {"name": "teardown", "outcome": "passed", "duration": 9.393692016601562e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.0002815723419189453}, "outcome": "failed"}, {"name": "tests/force_breakup_tests/test_force_breakup_api.py::ForceBreakupAPITests::test_user_can_retrieve_force_breakup_details", "call": {"name": "call", "longrepr": "self = <api.tests.force_breakup_tests.test_force_breakup_api.ForceBreakupAPITests testMethod=test_user_can_retrieve_force_breakup_details>\n\n    @pytest.mark.force_breakup_api\n    @pytest.mark.smoke\n    def test_user_can_retrieve_force_breakup_details(self):\n        details = self.forces_api_client.get_force_breakup_details_by_factID_and_eventkey(self.planning_measure_id, self.event_key)\n        details_obj = details.object\n>       self.assertEquals(details.status_code, 200, msg=ExceptionMessageGenerator().status_code_exception(details, 200, details.status_code))\nE       AssertionError: 500 != 200 : \nE       Status codes do not match.\nE       Expected Status Code: 200\nE       Actual Status Code: 500\nE       *****************************\nE       Request Details: \nE       *****************************\nE       URL: https://dev.periscope.mckinsey-solutions.com/intapp2/price/price/api/in/forcebreakup\nE       Method: POST\nE       payload: {\"filters\": {\"factIdentifiers\": [{\"key\": 93955}], \"dimensionfilters\": [{\"values\": [{\"key\": 41}]}]}}\nE       *****************************\nE       Response Details: \nE       *****************************\nE       Body: b'{\"success\":null,\"error\":\"failed to fetch user preferences\"}'\n\ntests/force_breakup_tests/test_force_breakup_api.py:21: AssertionError", "outcome": "failed", "duration": 0.03448963165283203}, "duration": 0.5649712085723877, "run_index": 3, "teardown": {"name": "teardown", "outcome": "passed", "duration": 7.653236389160156e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.26520252227783203}, "outcome": "failed"}, {"name": "tests/matchcompetitivepositioning_tests/test_matchcompetitivepositioning_api.py::CompetitivePositioningAPI::test_number_columns_in_responses_of_mypricegroup_matches", "call": {"name": "call", "longrepr": "self = <api.tests.matchcompetitivepositioning_tests.test_matchcompetitivepositioning_api.CompetitivePositioningAPI testMethod=test_number_columns_in_responses_of_mypricegroup_matches>\n\n    @pytest.mark.match_competitive_positioning_api\n    @pytest.mark.smoke\n    def test_number_columns_in_responses_of_mypricegroup_matches(self):\n        details = self.competitive_positioning_client.get_competitive_positioning_details_by_factID(self.planning_measure_id)\n        details_obj = details.object\n>       self.assertEquals(len(details_obj.success.myPriceGroup.columns), self.my_price_group_column_number, msg=ExceptionMessageGenerator.equality_exception(\n                details, self.my_price_group_column_number, len(details_obj.success.myPriceGroup.columns)))\nE       AttributeError: 'bytes' object has no attribute 'success'\n\ntests/matchcompetitivepositioning_tests/test_matchcompetitivepositioning_api.py:37: AttributeError", "outcome": "failed", "duration": 0.03336954116821289}, "duration": 0.03397512435913086, "run_index": 5, "teardown": {"name": "teardown", "outcome": "passed", "duration": 7.05718994140625e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.0002675056457519531}, "outcome": "failed"}, {"name": "tests/sell_through_tests/test_sell_through_api.py::SellThroughAPITests::test_user_can_retrieve_sell_through_details", "call": {"name": "call", "longrepr": "self = <api.tests.sell_through_tests.test_sell_through_api.SellThroughAPITests testMethod=test_user_can_retrieve_sell_through_details>\n\n    @pytest.mark.sell_through_api\n    @pytest.mark.smoke\n    def test_user_can_retrieve_sell_through_details(self):\n        details = self.sell_through_client.get_sell_through_details_by_factID(self.planning_measure_id)\n        details_obj = details.object\n>       self.assertEquals(details.status_code, 200, msg=ExceptionMessageGenerator().status_code_exception(details, 200, details.status_code))\nE       AssertionError: 500 != 200 : \nE       Status codes do not match.\nE       Expected Status Code: 200\nE       Actual Status Code: 500\nE       *****************************\nE       Request Details: \nE       *****************************\nE       URL: https://dev.periscope.mckinsey-solutions.com/intapp2/price/price/api/in/facts/93955/sellthrough/day\nE       Method: GET\nE       payload: None\nE       *****************************\nE       Response Details: \nE       *****************************\nE       Body: b'{\"success\":null,\"error\":\"failed to retrieve API config\"}'\n\ntests/sell_through_tests/test_sell_through_api.py:20: AssertionError", "outcome": "failed", "duration": 0.03298497200012207}, "duration": 0.03398585319519043, "run_index": 9, "teardown": {"name": "teardown", "outcome": "passed", "duration": 0.000461578369140625}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.0002696514129638672}, "outcome": "failed"}, {"name": "tests/event_price_volume_tests/test_preseason_force_price_volume_api.py::PriceVolumeAPITests::test_the_number_of_columns_returned_from_db_is_12", "call": {"name": "call", "longrepr": "self = <test_preseason_force_price_volume_api.PriceVolumeAPITests testMethod=test_the_number_of_columns_returned_from_db_is_12>\n\n    @pytest.mark.price_volume_api\n    @pytest.mark.smoke\n    def test_the_number_of_columns_returned_from_db_is_12(self):\n        details = self.price_volume_client.get_price_volume_for_single_retail(self.planning_measure_id, self.event_end_day_key)\n        details_obj = details.object\n>       self.assertEquals(len(details_obj.success.columns), self.data_column_number, msg=ExceptionMessageGenerator.equality_exception(\n                details, self.data_column_number, len(details_obj.success.columns)))\nE       AttributeError: 'NoneType' object has no attribute 'columns'\n\ntests/event_price_volume_tests/test_preseason_force_price_volume_api.py:32: AttributeError", "outcome": "failed", "duration": 0.03580331802368164}, "duration": 0.7358138561248779, "run_index": 0, "teardown": {"name": "teardown", "outcome": "passed", "duration": 6.794929504394531e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.34997129440307617}, "outcome": "failed"}, {"name": "tests/price_group_info_tests/test_price_group_info_api.py::PriceGroupInfoAPITests::test_number_columns_of_mypricegroupinfo_matches_db", "call": {"name": "call", "longrepr": "self = <api.tests.price_group_info_tests.test_price_group_info_api.PriceGroupInfoAPITests testMethod=test_number_columns_of_mypricegroupinfo_matches_db>\n\n    @pytest.mark.price_group_info\n    @pytest.mark.smoke\n    def test_number_columns_of_mypricegroupinfo_matches_db(self):\n        details = self.price_group_info_api_client.get_price_group_info(self.planning_measure_id)\n        details_obj = details.object\n>       self.assertEquals(len(details_obj.success.columns), self.my_price_group_info_column_number, msg=ExceptionMessageGenerator.equality_exception(\n                details, self.my_price_group_info_column_number, len(details_obj.success.columns)))\nE       AttributeError: 'NoneType' object has no attribute 'columns'\n\ntests/price_group_info_tests/test_price_group_info_api.py:27: AttributeError", "outcome": "failed", "duration": 0.03502655029296875}, "duration": 0.5619983673095703, "run_index": 6, "teardown": {"name": "teardown", "outcome": "passed", "duration": 5.817413330078125e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.2634568214416504}, "outcome": "failed"}, {"name": "tests/sell_through_tests/test_sell_through_api.py::SellThroughAPITests::test_number_of_colums_retrieved_sell_through_details_is_43", "call": {"name": "call", "longrepr": "self = <api.tests.sell_through_tests.test_sell_through_api.SellThroughAPITests testMethod=test_number_of_colums_retrieved_sell_through_details_is_43>\n\n    @pytest.mark.sell_through_api\n    @pytest.mark.smoke\n    def test_number_of_colums_retrieved_sell_through_details_is_43(self):\n        details = self.sell_through_client.get_sell_through_details_by_factID(self.planning_measure_id)\n        details_obj = details.object\n>       self.assertEqual(len(details_obj.success.columns), 43, msg=ExceptionMessageGenerator.equality_exception(\n                details, 43, len(details_obj.success.columns)))\nE       AttributeError: 'NoneType' object has no attribute 'columns'\n\ntests/sell_through_tests/test_sell_through_api.py:31: AttributeError", "outcome": "failed", "duration": 0.03534507751464844}, "duration": 0.6346027851104736, "run_index": 8, "teardown": {"name": "teardown", "outcome": "passed", "duration": 6.508827209472656e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.29959630966186523}, "outcome": "failed"}, {"name": "tests/matchcompetitivepositioning_tests/test_matchcompetitivepositioning_api.py::CompetitivePositioningAPI::test_number_columns_in_responses_of_competitors_matches", "call": {"name": "call", "longrepr": "self = <api.tests.matchcompetitivepositioning_tests.test_matchcompetitivepositioning_api.CompetitivePositioningAPI testMethod=test_number_columns_in_responses_of_competitors_matches>\n\n    @pytest.mark.match_competitive_positioning_api\n    @pytest.mark.smoke\n    def test_number_columns_in_responses_of_competitors_matches(self):\n        details = self.competitive_positioning_client.get_competitive_positioning_details_by_factID(self.planning_measure_id)\n        details_obj = details.object\n>       self.assertEquals(len(details_obj.success.competitors.columns), self.competitors_data_column_number, msg=ExceptionMessageGenerator.equality_exception(\n                details, self.competitors_data_column_number, len(details_obj.success.competitors.columns)))\nE       AttributeError: 'bytes' object has no attribute 'success'\n\ntests/matchcompetitivepositioning_tests/test_matchcompetitivepositioning_api.py:45: AttributeError", "outcome": "failed", "duration": 0.03553271293640137}, "duration": 0.7206251621246338, "run_index": 4, "teardown": {"name": "teardown", "outcome": "passed", "duration": 5.8650970458984375e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.3425168991088867}, "outcome": "failed"}, {"name": "tests/events_api_tests/test_events_api.py::EventsAPITests::test_user_can_retrieve_event_details", "call": {"name": "call", "longrepr": "self = <api.tests.events_api_tests.test_events_api.EventsAPITests testMethod=test_user_can_retrieve_event_details>\n\n    @pytest.mark.events_api\n    @pytest.mark.smoke\n    def test_user_can_retrieve_event_details(self):\n        details = self.events_api_client.get_event_details_by_factID(self.planning_measure_id)\n>       self.assertEquals(details.status_code, 200, msg=ExceptionMessageGenerator().status_code_exception(details, 200, details.status_code))\nE       AssertionError: 500 != 200 : \nE       Status codes do not match.\nE       Expected Status Code: 200\nE       Actual Status Code: 500\nE       *****************************\nE       Request Details: \nE       *****************************\nE       URL: https://dev.periscope.mckinsey-solutions.com/intapp2/price/price/api/events?scope=planning\nE       Method: POST\nE       payload: {\"filters\": {\"factIdentifiers\": [{\"key\": 93955}]}}\nE       *****************************\nE       Response Details: \nE       *****************************\nE       Body: b'{\"success\":null,\"error\":\"failed to get user preferences\"}'\n\ntests/events_api_tests/test_events_api.py:23: AssertionError", "outcome": "failed", "duration": 0.03545570373535156}, "duration": 0.5733499526977539, "run_index": 2, "teardown": {"name": "teardown", "outcome": "passed", "duration": 7.390975952148438e-05}, "setup": {"name": "setup", "outcome": "passed", "duration": 0.26891016960144043}, "outcome": "failed"}], "created_at": "2017-03-06 12:08:34.577180", "summary": {"num_tests": 10, "failed": 10, "duration": 2.6196725368499756}}}